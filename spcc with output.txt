Title : Design and Implementation of Pass 1 of
Two Pass Macro Processor

Code :

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
FILE *f1,*f2,*f3;
char mne[20],opnd[20],la[20];
clrscr();
f1=fopen("minp2.txt","r");
f2=fopen("ntab2.txt","w+");
f3=fopen("dtab2.txt","w+");
fscanf(f1,"%s%s%s",la,mne,opnd);
while(strcmp(mne,"MEND")!=0)
{
if(strcmp(mne,"MACRO")==0)
{
fprintf(f2,"%s\n",la);
fprintf(f3,"%s\t%s\n",la,opnd);
}
else
fprintf(f3,"%s\t%s\n",mne,opnd);
fscanf(f1,"%s%s%s",la,mne,opnd);
}
fprintf(f3,"%s",mne);
fclose(f1);
fclose(f2);
fclose(f3);
printf("PASS 1 is successful");
getch();
}
 

Output :


minp2.txt

EX1		MACRO	&A,&B
-		LDA		&A
-		STA		&B
-		MEND		-
SAMPLE 	START		1000
-		EX1		N1,N2
N1		RESW		1
N2		RESW		1
-		END		-


Output files:

dtab2.txt

EX1		&A,&B
LDA		&A
STA		&B
MEND


ntab2.txt

EX1


//---------------------------------------------------------------------------------------------------------


Title : Design and Implementation of Pass 2 of Two Pass Macro Processor

Code :

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
FILE *f1,*f2,*f3,*f4,*f5;
int i,len;
char mne[20],opnd[20],la[20],name[20],mne1[20],opnd1[20],arg[20];
clrscr();
f1=fopen("minp2.txt","r");
f2=fopen("ntab2.txt","r");
f3=fopen("dtab2.txt","r");
f4=fopen("atab2.txt","w+");
f5=fopen("op2.txt","w");
fscanf(f1,"%s%s%s",la,mne,opnd);
while(strcmp(mne,"END")!=0)
{
if(strcmp(mne,"MACRO")==0)
{
fscanf(f1,"%s%s%s",la,mne,opnd);
while(strcmp(mne,"MEND")!=0)
fscanf(f1,"%s%s%s",la,mne,opnd);
}
else
{
fscanf(f2,"%s",name);
if(strcmp(mne,name)==0)
{
len=strlen(opnd);
for(i=0;i<len;i++)
{
if(opnd[i]!=',')
fprintf(f4,"%c",opnd[i]);
else
fprintf(f4,"\n");
}
fseek(f2,SEEK_SET,0);
fseek(f4,SEEK_SET,0);
fscanf(f3,"%s%s",mne1,opnd1);
fprintf(f5,".\t%s\t%s\n",mne1,opnd);
fscanf(f3,"%s%s",mne1,opnd1);
while(strcmp(mne1,"MEND")!=0)
{
if((opnd1[0]=='&'))
{
fscanf(f4,"%s",arg);
fprintf(f5,"-\t%s\t%s\n",mne1,arg);
}
else
fprintf(f5,"-\t%s\t%s\n",mne1,opnd1);
fscanf(f3,"%s%s",mne1,opnd1);
}
}
else
fprintf(f5,"%s\t%s\t%s\n",la,mne,opnd);
}
fscanf(f1,"%s%s%s",la,mne,opnd);
}
fprintf(f5,"%s\t%s\t%s\n",la,mne,opnd);
fclose(f1);
fclose(f2);
fclose(f3);
fclose(f4);
fclose(f5);
printf("pass2");
getch();
}
 

Output :


minp2.txt

EX1		MACRO	&A,&B
-		LDA		&A
-		STA		&B
-		MEND		-
SAMPLE	START		1000
-		EX1		N1,N2
N1		RESW		1
N2		RESW		1
-		END		-


dtab2.txt

EX1		&A,&B
LDA		&A
STA		&B
MEND


ntab2.txt

EX1




Output files:

atab2.txt

N1
N2


op2.txt
SAMPLE	START		1000
.		EX1		N1,N2
-		LDA		N1
-		STA		N2
N1		RESW		1
N2		RESW		1
-		END		 -

//---------------------------------------------------------------------------------------------------------


Title : Study and Implementation of Lexical
Analyzer.

Code :

#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
bool isValidDelimiter(char ch) {
   if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
   ch == '/' || ch == ',' || ch == ';' || ch == '>' ||
   ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
   ch == '[' || ch == ']' || ch == '{' || ch == '}')
   return (true);
   return (false);
}
bool isValidOperator(char ch){
   if (ch == '+' || ch == '-' || ch == '*' ||
   ch == '/' || ch == '>' || ch == '<' ||
   ch == '=')
   return (true);
   return (false);
}
// Returns 'true' if the string is a VALID IDENTIFIER.
bool isvalidIdentifier(char* str){
   if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
   str[0] == '3' || str[0] == '4' || str[0] == '5' ||
   str[0] == '6' || str[0] == '7' || str[0] == '8' ||
   str[0] == '9' || isValidDelimiter(str[0]) == true)
   return (false);
   return (true);
}
bool isValidKeyword(char* str) {
   if (!strcmp(str, "if") || !strcmp(str, "else") || !strcmp(str, "while") || !strcmp(str, "do") ||    !strcmp(str, "break") || !strcmp(str, "continue") || !strcmp(str, "int")
   || !strcmp(str, "double") || !strcmp(str, "float") || !strcmp(str, "return") || !strcmp(str,    "char") || !strcmp(str, "case") || !strcmp(str, "char")
   || !strcmp(str, "sizeof") || !strcmp(str, "long") || !strcmp(str, "short") || !strcmp(str, "typedef") || !strcmp(str, "switch") || !strcmp(str, "unsigned")
   || !strcmp(str, "void") || !strcmp(str, "static") || !strcmp(str, "struct") || !strcmp(str, "goto"))
   return (true);
   return (false);
}
bool isValidInteger(char* str) {
   int i, len = strlen(str);
   if (len == 0)
   return (false);
   for (i = 0; i < len; i++) {
      if (str[i] != '0' && str[i] != '1' && str[i] != '2'&& str[i] != '3' && str[i] != '4' && str[i] != '5'
      && str[i] != '6' && str[i] != '7' && str[i] != '8' && str[i] != '9' || (str[i] == '-' && i > 0))
      return (false);
   }
   return (true);
}
bool isRealNumber(char* str) {
   int i, len = strlen(str);
   bool hasDecimal = false;
   if (len == 0)
   return (false);
   for (i = 0; i < len; i++) {
      if (str[i] != '0' && str[i] != '1' && str[i] != '2' && str[i] != '3' && str[i] != '4' && str[i]       != '5' && str[i] != '6' && str[i] != '7' && str[i] != '8'
      && str[i] != '9' && str[i] != '.' || (str[i] == '-' && i > 0))
      return (false);
         if (str[i] == '.')
      hasDecimal = true;
   }
   return (hasDecimal);
}
char* subString(char* str, int left, int right) {
   int i;
   char* subStr = (char*)malloc( sizeof(char) * (right - left + 2));
   for (i = left; i <= right; i++)
      subStr[i - left] = str[i];
   subStr[right - left + 1] = '\0';
   return (subStr);
}
void detectTokens(char* str) {
   int left = 0, right = 0;
   int length = strlen(str);
   while (right <= length && left <= right) {
      if (isValidDelimiter(str[right]) == false)
      right++;
      if (isValidDelimiter(str[right]) == true && left == right) {
         if (isValidOperator(str[right]) == true)
         printf("Valid operator : '%c'
", str[right]);
         right++;
         left = right;
      } else if (isValidDelimiter(str[right]) == true && left != right || (right == length && left !=       right)) {
         char* subStr = subString(str, left, right - 1);
         if (isValidKeyword(subStr) == true)
            printf("Valid keyword : '%s'
", subStr);
         else if (isValidInteger(subStr) == true)
            printf("Valid Integer : '%s'
", subStr);
         else if (isRealNumber(subStr) == true)
            printf("Real Number : '%s'
", subStr);
         else if (isvalidIdentifier(subStr) == true
            && isValidDelimiter(str[right - 1]) == false)
         printf("Valid Identifier : '%s'
", subStr);
         else if (isvalidIdentifier(subStr) == false
            && isValidDelimiter(str[right - 1]) == false)
         printf("Invalid Identifier : '%s'
", subStr);
         left = right;
      }
   }
   return;
}
int main(){
   char str[100] = "float x = a + 1b; ";
   printf("The Program is : '%s' 
", str);
   printf("All Tokens are : 
");
   detectTokens(str);
   return (0);
}

Output :

The Program is : 'float x = a + 1b; '
All Tokens are :
Valid keyword : 'float'
Valid Identifier : 'x'
Valid operator : '='
Valid Identifier : 'a'
Valid operator : '+'
Invalid Identifier : '1b'

//---------------------------------------------------------------------------------------------------------


Title : Implementation of Shift Reduce Parser.
(Bottom Up Parser).

Code :

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int z = 0, i = 0, j = 0, c = 0;
char a[16], ac[20], stk[15], act[10];
void check()
{
	strcpy(ac,"REDUCE TO E -> ");
	for(z = 0; z < c; z++)
	{
		if(stk[z] == '4')
		{
			printf("%s4", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			printf("\n$%s\t%s$\t", stk, a);
		}
	}
		
	for(z = 0; z < c - 2; z++)
	{
		if(stk[z] == '2' && stk[z + 1] == 'E' && stk[z + 2] == '2')
		{
			printf("%s2E2", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			stk[z + 2] = '\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}
	}
		
	for(z=0; z<c-2; z++)
	{
		if(stk[z] == '3' && stk[z + 1] == 'E' && stk[z + 2] == '3')
		{
			printf("%s3E3", ac);
			stk[z]='E';
			stk[z + 1]='\0';
			stk[z + 1]='\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}
	}
	return ; 
}

int main()
{
	printf("Grammer is -\nE->2E2 \nE->3E3 \nE->4\n");
	strcpy(a,"32423");
	c=strlen(a);
	strcpy(act,"SHIFT");
	printf("\nStack \t Input \t Action");
	printf("\n$\t%s$\t", a);

	for(i = 0; j < c; i++, j++)
	{
		printf("%s", act);
		stk[i] = a[j];	
		stk[i + 1] = '\0';
		a[j]=' ';
		printf("\n$%s\t%s$\t", stk, a);
		check();
	}
	check();
	if(stk[0] == 'E' && stk[1] == '\0')
		printf("Accept\n");
	else 
		printf("Reject\n");
}

Output :

Grammer is -
E -> 2E2 
E -> 3E3 
E -> 4 

Stack     	 Input     	Action
$    		 32423$    	SHIFT
$3    		 2423$  	SHIFT
$32      	 423$    	SHIFT
$324      	 23$  		REDUCE TO E -> 4
$32E       	 23$    		SHIFT
$32E2     	 3$   		REDUCE TO E -> 2E2
$3E        	 3$    		SHIFT
$3E3     	 $    		REDUCE TO E -> 3E3
$E         	 $    		Accept

//---------------------------------------------------------------------------------------------------------

Title : Implementation of Intermediate code
generation phase of compiler.

Code :

#include<stdio.h>
#include<conio.h>
#include<string.h>

int i=1,j=0,no=0,tmpch=90;
char str[100],left[15],right[15];
void findopr();
void explore();
void fleft(int);
void fright(int);
struct exp
{
int pos;
char op;
}k[15];

void main()
{
printf("\t\tINTERMEDIATE CODE GENERATION\n\n");
printf("Enter the Expression :");
scanf("%s",str);
printf("The intermediate code:\n");
findopr();
explore();
}

void findopr()
{
for(i=0;str[i]!='\0';i++)
if(str[i]==':')
{
k[j].pos=i;
k[j++].op=':';
}

for(i=0;str[i]!='\0';i++)
if(str[i]=='/')
{
k[j].pos=i;
k[j++].op='/';
}

for(i=0;str[i]!='\0';i++)
if(str[i]=='*')
{
k[j].pos=i;
k[j++].op='*';
}

for(i=0;str[i]!='\0';i++)
if(str[i]=='+')
{
k[j].pos=i;
k[j++].op='+';
}

for(i=0;str[i]!='\0';i++)
if(str[i]=='-')
{
k[j].pos=i;
k[j++].op='-';
}
}

void explore()
{
i=1;
while(k[i].op!='\0')
{
fleft(k[i].pos);
fright(k[i].pos);
str[k[i].pos]=tmpch--;
printf("\t%c := %s%c%s\t\t",str[k[i].pos],left,k[i].op,right);
printf("\n");
i++;
}
fright(-1);
if(no==0)
{
fleft(strlen(str));
printf("\t%s := %s",right,left);
getch();
exit(0);
}
printf("\t%s := %c",right,str[k[--i].pos]);
getch();
}

void fleft(int x)
{
int w=0,flag=0;
x--;
while(x!= -1 &&str[x]!= '+' &&str[x]!='*'&&str[x]!='='&&str[x]!='\0'&&str[x]!='-'&&str[x]!='/'&&str[x]!=':')
{
if(str[x]!='$'&& flag==0)
{
left[w++]=str[x];
left[w]='\0';
str[x]='$';
flag=1;
}
x--;
}
}

void fright(int x)
{
int w=0,flag=0;
x++;
while(x!= -1 && str[x]!= '+'&&str[x]!='*'&&str[x]!='\0'&&str[x]!='='&&str[x]!=':'&&str[x]!='-'&&str[x]!='/')
{
if(str[x]!='$'&& flag==0)
{
right[w++]=str[x];
right[w]='\0';
str[x]='$';
flag=1;
}
x++;
}
}

Output :

                INTERMEDIATE CODE GENERATION

Enter the Expression : w:=a*b+c/d-e/f+g*h

The Intermediate Code Is :

        Z := c/d
        Y := e/f
        X := a*b
        W := g*h
        V := X+Z
        U := Y+W
        T := V-U
        w := T


//---------------------------------------------------------------------------------------------------------


Title : Implementation of code optimization
phase of compiler.

Code :
#include <stdio.h>
#include <string.h>
struct op {
char l;
   char r[20];
} op[10], pr[10];
int main() {
   int a, i, k, j, n, z = 0, m, q;
   char *p, *l;
   char temp, t;
   char *tem;
   printf("Enter the Number of Values:");
   scanf("%d", &n);
   for (i = 0; i < n; i++)
   {
       printf("left: ");
       scanf(" %c", &op[i].l);

     printf("right: ");
    scanf(" %s", &op[i].r);
}
printf("Intermediate Code\n");
for (i = 0; i < n; i++)
{
    printf("%c=", op[i].l);
    printf("%s\n", op[i].r);
}
for (i = 0; i < n - 1; i++)
{
    temp = op[i].l;
    for (j = 0; j < n; j++)
    {
        p = strchr(op[j].r, temp);
        if (p)
        {
            pr[z].l = op[i].l;
            strcpy(pr[z].r, op[i].r);
            z++;
} }
}
pr[z].l = op[n - 1].l;
strcpy(pr[z].r, op[n - 1].r);
z++;
printf("\nAfter Dead Code Elimination\n");
for (k = 0; k < z; k++)
{
    printf("%c\t=", pr[k].l);
    printf("%s\n", pr[k].r);
}
for (m = 0; m < z; m++)
{
    tem = pr[m].r;
    for (j = m + 1; j < z; j++)
 
     {
        p = strstr(tem, pr[j].r);
        if (p)
        {
            t = pr[j].l;
            pr[j].l = pr[m].l;
            for (i = 0; i < z; i++)
            {
                l = strchr(pr[i].r, t);
                if (l)
                {
                    a = l - pr[i].r;
                    printf("pos: %d\n", a);
                    pr[i].r[a] = pr[m].l;
} }
} }
}
printf("Eliminate Common Expression\n");
for (i = 0; i < z; i++)
{
    printf("%c\t=", pr[i].l);
    printf("%s\n", pr[i].r);
}
for (i = 0; i < z; i++)
{
    for (j = i + 1; j < z; j++)
    {
        q = strcmp(pr[i].r, pr[j].r);
        if ((pr[i].l == pr[j].l) && !q)
        {
            pr[i].l = '\0';
        }
} }
 
    printf("Optimized Code\n");
   for (i = 0; i < z; i++)
   {
       if (pr[i].l != '\0')
       {
           printf("%c=", pr[i].l);
           printf("%s\n", pr[i].r);
       }
}
return 0; }
/*
Input:
Enter the Number of Values:5
left: a
right: 9
left: b
right: c+d
left: e
right: c+d
left: f
right: b+e
left: k
right: 12
Output:
Intermediate Code
a=9
b=c+d
e=c+d
f=b+e
k=12
After Dead Code Elimination
b       =c+d
 
 e       =c+d
k       =12
Eliminate Common Expression
b       =c+d
b       =c+d
k       =12
Optimized Code
b=c+d
k=12
*/